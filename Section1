Integrating Data Visualization with an Expense Tracking Application

visualization features by covering the following topics:
Introducing MERN Expense Tracker
Adding expense records
Visualizing expense data over time

Lecture 1:
Introducing MERN Expense Tracker
--The MERN Expense Tracker application will allow users to keep track of their day-today
expenses. Users who are signed in to their accounts will be able to add their
expense records with details such as expense description, category, amount, and
when the given expense was incurred or paid. The application will store these
expense records and extract meaningful data patterns to give the user a visual
representation of how their expense habits fare as time progresses.

--We will add new React components to implement views for creating expense records,
listing and modifying already recorded expenses, and displaying reports giving
insights into expenses incurred by a user over time. We will also modify existing
components such as the Home component to render an overview of current expenses
by a user.

Adding expense records::
--In the MERN Expense Tracker application, a user who is signed in will be able to
create and manage their expense records. To enable these features of adding and
managing expense records, we will need to define how to store expense details, and
implement the full-stack slices that will let users create new expenses, view these
expenses, and update or delete existing expenses on the application.

Lecture 2:
Defining an Expense model::
---We will implement a Mongoose model to define an Expense model for storing the
details of each expense record.
--The Expense schema in this model will have simple fields to store details about each
expense, such as a title, the amount, category, and date when it was incurred, along
with a reference to the user who created the record.

Lecture 2:
Creating a new expense record::
--In order to create a new expense record on the application, we will need to integrate a
full-stack slice that allows the user to fill out a form view in the frontend, and then
save the entered details to a new expense document in the database in the
backend.

The create expense API::
--A POST request to this route at /api/expenses will first ensure that the requesting
user is signed in with the requireSignin method from the auth controllers, before
invoking the create method to add a new expense record in the database

--To fetch this API in the frontend, we will add a corresponding create method in api-expense.js,

The NewExpense component::
--Signed-in users on this expense tracking application will interact with a form view in
order to enter details of a new expense record. This form view will be rendered in the
NewExpense component, which will allow users to create a new expense by entering
the expense title, the amount spent, the category of the expense, the date-time of
when the expense was incurred, and any additional notes.

--Signed-in users on this expense tracking application will interact with a form view in
order to enter details of a new expense record. This form view will be rendered in the
NewExpense component, which will allow users to create a new expense by entering
the expense title, the amount spent, the category of the expense, the date-time of
when the expense was incurred, and any additional notes.

--To implement this date-time picker for the form, we will use Material-UI Pickers
along with a date management library

************8yarn add @material-ui/pickers @date-io/date-fns@1.x date-fns***************

Lecture 3:
Listing expenses::
---In MERN Expense Tracker, users will be able to view the list of expenses that they
already recorded on the application and incurred within a provided date range.

The expenses by user API::
--We will implement an API to get the expenses recorded by a specific user and
incurred between a provided date range.

--we start by gathering the first day and the last day of the date range
specified in the request query. From the database, we then retrieve the expenses
incurred by the signed-in user within these dates. The signed-in user is matched
against the user referenced in the recorded _by field. The find query against the
Expense collection using these values will return matching expenses sorted by the
incurred_on field, with the recently incurred expenses listed first.

--This fetch method will be used in the Expenses component to retrieve and show the
expenses to the user.

The Expenses component::
--The list of expenses retrieved from the database will be rendered using a React
component called Expenses. This component, on the initial load, will render the
expenses incurred by the signed-in user in the current month. In this view, the user
will also have the option to pick a date range to retrieve expenses incurred within
specific dates,

Searching by date range::
--we will add two DatePicker components to collect the first day and the
last day of the query range, and also add a button to initiate the search,
--Once the expenses resulting from this new query are received from the server, we set
it to the state to be rendered in the view.

Rendering expenses::
--we will add a form to search by date range, before iterating through the resulting expenses array to render individual
expense details.

Modifying an expense record::
--Users on MERN Expense Tracker will be able to modify the expenses they have
already recorded on the application by either updating the details of an expense or
deleting the expense record altogether
