Lecture 1:
Visualizing expense data over time::
--Aside from allowing users to keep logs of their expenses, the MERN Expense Tracker
application will process the collected expense data to give users insights into their
spending habits over time. We will implement simple data aggregation and
visualization features to demonstrate how the MERN stack can accommodate such
requirements in any full-stack application. To enable these features, we will utilize
MongoDB's aggregation framework and also the React-based charting and data
visualization library—Victory—by Formidable

--In the following sections, we will first add features to summarize a user's expenses in
the current month and also show how they are doing compared to previous months.
Then, we will add different Victory charts to give them a visual representation of
their spending patterns over a month, and a year, and per expense category.

Summarizing recent expenses::
--When a user signs in to their account on the application, they will see a preview of the
expenses they incurred so far in the current month. They will also see a comparison of
how much more or less they are spending in each category in comparison to the
averages from previous months. To implement these features, we will have to add
backend APIs that will run aggregation operations on the relevant expense data in the
database and return the computed results to be rendered in the frontend

Previewing expenses in the current month::
--After a user signs in to the application, we will show a preview of their current
expenses, including their total expenditure for the current month and how much they
spent on the current date and the day before.

The current month preview API::
--We will add an API to the backend that will return the preview of expenses incurred
so far in the current month.
--In the faceted aggregation operation result, each pipeline has its
own field in the output document where the results are stored as an
array of documents.

Lecture 2:
Rendering the preview of current expenses::
--To retrieve the expense totals and render these in the view, we can call the current
month preview API either in a useEffect hook or when a button is clicked on.

Lecture 3:
Tracking current expenses by category::
--we will give the user an overview of how much they are currently spending in each expense category in comparison to previous averages. For each
category, we will display the monthly average based on previous expense data, show the total spent so far in the current month, and show the difference to indicate
whether they are spending extra or are saving money in the current month.

--To implement this feature, we need to add a backend API that will process the
existing expense data to return the monthly average along with the total spent in the
current month for each category, so it can be rendered in a React component. In the
following sections, we will look at the implementation and integration of this API and
frontend view to complete this feature to track expenses by category.

The current expenses by category API::
--We will add an API to the backend that will return the average monthly expenses and
the total spent in the current month for each expense category. To implement this
API.

Rendering an overview of expenses per category::
--Besides informing the user of how much they are spending currently, we can give
them an idea of how they are doing in comparison to previous expenditures. We can
tell them whether they are spending more or saving money in the current month for
each category.

Lecture 4:
Displaying expense data charts::
--Graphs and charts are time-tested mechanisms for visualizing complex data patterns
--Victory to report expense patterns over time in graphical representations to the user.
--Victory is an open source charting and data visualization library for React and React Native developed by Formidable. Different types of
charts are available as modular components that can be customized and added to any React application

*********yarn add victory*************

--In the expense tracking application, we will add three different charts as a part of the
interactive expense reports presented to the user. The three charts will include a
scatter plot showing the expenses incurred in a given month, a bar chart showing the
total expenses incurred per month in a given year, and a pie chart showing the
average expenditure per category within a provided date range

--For each chart, we will add a corresponding backend API to retrieve the relevant
expense data and a React component to the frontend that will use the retrieved data
to render the associated Victory chart.

A month's expenses in a scatter plot::
--We will show the expenses incurred by a user over a given month in a scatter plot.
This will provide them with a visual overview of how their expenses pan out over a
month
--We plot the expense amounts versus the day of the month when it was incurred on
the y axis and x axis, respectively. Hovering over a plotted bubble displays how much
was spent on which date for that specific expense record.


Lecture 5:
The scatter plot data API::
--We will add an API to the backend that will return the expenses incurred over a given
month in the data format needed to render the scatter chart in the frontend.

The MonthlyScatter component::
--We will implement a React component that calls the scatter plot data API to render
the received array of expenses incurred over a given month in a Victory Scatter chart.

Total expenses per month in a year::
--We will show the user a bar chart representing their total monthly expenses over a
given year.
--we populate the bar chart with the total expense value corresponding to each
month in a given year. We add the monthly total value as labels to each bar
--we will
implement this feature by first adding a backend API that will return the total
expenses incurred per month over a given year and in the format needed to render it
in a Victory Bar chart.

The yearly expenses API::
--We will add an API to the backend that will return the total monthly expenses
incurred over a given year in the data format needed to render the bar chart in the
frontend.

The YearlyBar component::
--We will implement a React component that calls the yearly expenses data API to
render the received array of expenses incurred monthly over a given year in a Victory
Bar chart.

--We pass the data to VictoryBar and also define the categories for the x axis values using the month strings so that all months of the year are displayed on the chart, even
if a corresponding total value does not exist yet. We render individual labels for each bar to show the total expense value for each month. To map the x axis value with the
correct month string, we specify it in the x prop for the VictoryBar component.

--This code plots and renders the bar chart against the data provided, with the monthly expense totals mapped for each month. In the next section, we will follow similar
steps to add a pie chart to graphically display the average expenses per category in a given date range.


Lecture 6:
Average expenses per category in a pie chart::
--We can render a pie chart showing how much users spend on average per expense category over a given period of time. This will help users visualize which categories
consume more or less of their wealth over time.

--We populate the pie chart with each category and its average expenditure value, showing the corresponding name and amount as labels. In the following sections, we
will implement this feature by first adding a backend API that will return the average expenses per category over the given date range and in the format needed to render it
in a Victory Pie chart.

The average expenses by category API::

The CategoryPie component::
--We will implement a React component that calls the average expenses by category API to render the received array of average expenses incurred per category in a
Victory Pie chart.

--We have added three different Victory charts to the application based on the userrecorded
expense data, which was processed as needed and retrieved from the
database in the backend



